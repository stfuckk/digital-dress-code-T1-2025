export function useBackgroundReplacement(
  sourceVideo,
  outputCanvas,
  stats,
  props,
) {
  let worker = null;
  let composer = null;
  let isInitialized = false;
  let isReady = false;
  let isComposerReady = false;
  let frameCount = 0;
  let fpsHistory = [];
  let lastFpsTime = Date.now();
  let fpsFrameCount = 0;
  let emaLatencyMs = 25;

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  const targetShort = 480; // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è FPS
  const downsample = 0.7; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  const threads = 1; // –ú–∏–Ω–∏–º—É–º –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
  
  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏ (–æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è FPS)
  const enablePostProcessing = false; // –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  const blurRadius = 0;
  const edgeThreshold = 0.1;
  const morphKernelSize = 3;

  // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  let frameSkipCounter = 0;
  let PROCESS_EVERY_N_FRAMES = 1; // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫ –∫–∞–¥—Ä–æ–≤
  let lastProcessedMask = null;
  let isProcessing = false;
  let performanceHistory = [];
  let adaptiveDownsample = downsample;
  let adaptiveFrameSkip = 1;
  
  // –†–µ–∂–∏–º "–¢—É—Ä–±–æ" –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  let turboMode = true;

  // –§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  const loadedBackgroundImage = { value: null };
  let currentPhotoUrl = null;
  
  // –ö—ç—à –¥–ª—è –±–ª—é—Ä–∞ —Ñ–æ–Ω–∞
  let blurCache = null;
  let lastBlurTime = 0;
  let lastBlurFrame = null;
  let lastBlurConfig = null;
  const BLUR_CACHE_DURATION = 50; // –ö—ç—à–∏—Ä—É–µ–º –±–ª—é—Ä –Ω–∞ 50–º—Å
  
  // –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–≤–∏–∂–µ–Ω–∏—è
  let motionDetected = false;
  let staticFrameCount = 0;
  let lastMaskSum = 0;
  
  // –ü—Ä–æ—Å—Ç–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é –º–∞—Å–∫–∏
  function detectMotion(pha, w, h) {
    // –í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º—É –º–∞—Å–∫–∏ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    let currentMaskSum = 0;
    for (let i = 0; i < w * h; i++) {
      currentMaskSum += pha[i];
    }
    
    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –∫–∞–¥—Ä–æ–º
    const maskDifference = Math.abs(currentMaskSum - lastMaskSum);
    const motionThreshold = w * h * 0.01; // 1% –æ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∏–∫—Å–µ–ª–µ–π
    
    if (maskDifference > motionThreshold) {
      motionDetected = true;
      staticFrameCount = 0;
    } else {
      staticFrameCount++;
      if (staticFrameCount > 10) { // 10 –∫–∞–¥—Ä–æ–≤ –±–µ–∑ –¥–≤–∏–∂–µ–Ω–∏—è
        motionDetected = false;
      }
    }
    
    lastMaskSum = currentMaskSum;
  }

  // –ë—ã—Å—Ç—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–ª—é—Ä–∞
  function renderCachedBlur(ctx, width, height) {
    const now = Date.now();
    const blurAmount = props.backgroundConfig.blurAmount || 15;
    const currentConfig = JSON.stringify(props.backgroundConfig);
    
    // –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ: –¥–æ–ª—å—à–µ –∫—ç—à–∏—Ä—É–µ–º –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è
    const cacheDuration = motionDetected ? BLUR_CACHE_DURATION : BLUR_CACHE_DURATION * 3;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à
    const shouldUpdateCache = !blurCache || 
                             (now - lastBlurTime) > cacheDuration ||
                             lastBlurFrame !== sourceVideo.value ||
                             lastBlurConfig !== currentConfig;
    
    if (shouldUpdateCache) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫—ç—à –±–ª—é—Ä–∞
      if (!blurCache) {
        blurCache = new OffscreenCanvas(width, height);
      }
      
      const blurCtx = blurCache.getContext("2d");
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–ª—é—Ä –∫ –≤–∏–¥–µ–æ
      blurCtx.filter = `blur(${blurAmount}px)`;
      blurCtx.drawImage(sourceVideo.value, 0, 0, width, height);
      blurCtx.filter = "none";
      
      lastBlurTime = now;
      lastBlurFrame = sourceVideo.value;
      lastBlurConfig = currentConfig;
    }
    
    // –†–∏—Å—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–ª—é—Ä
    ctx.drawImage(blurCache, 0, 0, width, height);
  }

  // –§—É–Ω–∫—Ü–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  function adaptPerformance(processingTime) {
    if (!turboMode) return; // –í —Ç—É—Ä–±–æ-—Ä–µ–∂–∏–º–µ –Ω–µ –∞–¥–∞–ø—Ç–∏—Ä—É–µ–º
    
    performanceHistory.push(processingTime);
    if (performanceHistory.length > 3) { // –ï—â–µ –º–µ–Ω—å—à–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π —Ä–µ–∞–∫—Ü–∏–∏
      performanceHistory.shift();
    }
    
    const avgTime = performanceHistory.reduce((a, b) => a + b, 0) / performanceHistory.length;
    
    // –°–≤–µ—Ä—Ö-–∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è —Ç—É—Ä–±–æ-—Ä–µ–∂–∏–º–∞
    if (avgTime > 20) { // 20ms = 50 FPS - –æ—á–µ–Ω—å —Å—Ç—Ä–æ–≥–∏–π –ø–æ—Ä–æ–≥
      adaptiveDownsample = Math.min(0.95, adaptiveDownsample + 0.2); // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–Ω–∏–∂–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
      adaptiveFrameSkip = Math.min(5, adaptiveFrameSkip + 2); // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞–¥—Ä–æ–≤
      console.log(`‚ö° –¢–£–†–ë–û-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: downsample=${adaptiveDownsample.toFixed(2)}, skip=${adaptiveFrameSkip}`);
    }
    // –û—á–µ–Ω—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ –ø–æ–≤—ã—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
    else if (avgTime < 10 && adaptiveDownsample > 0.6) { // 10ms = 100 FPS
      adaptiveDownsample = Math.max(0.6, adaptiveDownsample - 0.02);
      adaptiveFrameSkip = Math.max(1, adaptiveFrameSkip - 1);
      console.log(`üöÄ –ú–∏–∫—Ä–æ–ø–æ–≤—ã—à–µ–Ω–∏–µ: downsample=${adaptiveDownsample.toFixed(2)}, skip=${adaptiveFrameSkip}`);
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ Web Workers
  const createWorker = () => {
    return new Worker(new URL("../workers/rvm.worker.js", import.meta.url), {
      type: "module",
    });
  };

  const createComposer = () => {
    try {
      return new Worker(new URL("../workers/simple-comp.worker.js", import.meta.url), {
        type: "module",
      });
    } catch (error) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä:', error);
      return null;
    }
  };

  const initialize = async () => {
    if (isInitialized) return;

    try {
      console.log("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π RVM –º–æ–¥–µ–ª–∏...");

      // –°–æ–∑–¥–∞–µ–º –≤–æ—Ä–∫–µ—Ä—ã
      worker = createWorker();
      // –û—Ç–∫–ª—é—á–∞–µ–º –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      composer = null; // createComposer();
      
      console.log('‚ö° –†–µ–∂–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä –æ—Ç–∫–ª—é—á–µ–Ω');

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –≤–æ—Ä–∫–µ—Ä–∞
      worker.onmessage = (e) => {
        const msg = e.data;

        if (msg.type === "ready") {
          isReady = true;
          console.log("–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
          return;
        }

        if (msg.type === "reset-ok") {
        return;
      }

        if (msg.type === "error") {
          console.error("Worker error:", msg.message);
          stats.value.error = msg.message;
        return;
      }

        if (msg.type === "result") {
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
          const pha = new Float32Array(msg.pha);
          const dims = msg.shape;
          const h = dims[2],
            w = dims[3];
          const timeMs = msg.timeMs || msg.totalTimeMs || 0;
          const postProcessTimeMs = msg.postProcessTimeMs || 0;

          emaLatencyMs = 0.9 * emaLatencyMs + 0.1 * timeMs;

          // –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
          adaptPerformance(timeMs);
          
          // –î–µ—Ç–µ–∫—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –¥–ª—è —É–º–Ω–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
          detectMotion(pha, w, h);

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Å–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
          lastProcessedMask = { pha, w, h };

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Å–º–µ—à–∏–≤–∞–Ω–∏—è
          if (composer && isComposerReady) {
            try {
              composer.postMessage({
                type: 'mask',
                payload: { data: new Uint8Array(pha), width: w, height: h }
              });
            } catch (error) {
              console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–∞—Å–∫—É –≤ –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä:', error);
              // Fallback: —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –Ω–∞–ø—Ä—è–º—É—é
              renderMaskToCanvas(pha, w, h);
            }
          } else {
            // Fallback: —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –Ω–∞–ø—Ä—è–º—É—é
            renderMaskToCanvas(pha, w, h);
          }

          // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
          updateFrameStats(timeMs, postProcessTimeMs);
          
          // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–∞–¥—Ä–∞
        isProcessing = false;
      }
    };

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    if (composer) {
      composer.onmessage = (e) => {
        const msg = e.data;
        
        if (msg.type === 'status') {
          console.log('Composer:', msg.payload);
          if (msg.payload.includes('ready')) {
            isComposerReady = true;
          }
        }
        
        if (msg.type === 'error') {
          console.error('Composer error:', msg.payload);
          stats.value.error = msg.payload;
        }
        
        if (msg.type === 'frame') {
          // Headless —Ä–µ–∂–∏–º: —Ä–∏—Å—É–µ–º –≥–æ—Ç–æ–≤—ã–π –∫–∞–¥—Ä
          if (msg.payload?.bitmap) {
            const ctx = outputCanvas.value.getContext('2d');
            ctx.clearRect(0, 0, outputCanvas.value.width, outputCanvas.value.height);
            ctx.drawImage(msg.payload.bitmap, 0, 0);
            msg.payload.bitmap.close();
          }
        }
      };
    }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
      // URL –º–æ–¥–µ–ª–∏ - –Ω—É–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å —Å GitHub
      const modelUrl = "/models/rvm_mobilenetv3_fp32.onnx";

      worker.postMessage({
        type: "init",
      modelUrl,
      downsample,
        threads,
        enablePostProcessing,
        blurRadius,
        edgeThreshold,
        morphKernelSize,
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    if (composer) {
      try {
        const canvas = outputCanvas.value;
        const width = canvas.width || 640;
        const height = canvas.height || 360;
        
        // –°–æ–∑–¥–∞–µ–º –∫–ª–æ–Ω–∏—Ä—É–µ–º—ã–π –æ–±—ä–µ–∫—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const backgroundConfig = {
          type: props.backgroundConfig?.type || 'blur',
          blurAmount: props.backgroundConfig?.blurAmount || 15,
          color: props.backgroundConfig?.color || '#2e2e2e',
          photo: props.backgroundConfig?.photo || null
        };
        
        composer.postMessage({
          type: 'headless-init',
          width,
          height,
          mode: backgroundConfig.type,
          background: backgroundConfig
        });
      } catch (error) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä:', error);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–∞
      }
    }

    isInitialized = true;
    console.log("‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è RVM –º–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!");
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏:", error);
      throw error;
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const loadBackgroundImage = (url) => {
    if (currentPhotoUrl === url && loadedBackgroundImage.value) {
      return; // –£–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
    }
    
    currentPhotoUrl = url;
    const img = new Image();
    img.crossOrigin = "anonymous";
    img.onload = () => {
      loadedBackgroundImage.value = img;
      console.log("–§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:", url);
    };
    img.onerror = () => {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", url);
      loadedBackgroundImage.value = null;
    };
    img.src = url;
  };

  const drawUserInfoOnCanvas = (ctx, width, height) => {
    if (!props.userInfo) return;
    
    const { name, position, company, email, telegram, privacyLevel } = props.userInfo;
    
    // –ü–æ–∑–∏—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –ª–µ–≤–æ–º –í–ï–†–•–ù–ï–ú —É–≥–ª—É
    const padding = 30;
    const lineHeight = 45;
    const smallLineHeight = 30;
    let yPos = padding + 40; // –ù–∞—á–∏–Ω–∞–µ–º —Å –≤–µ—Ä—Ö–∞ + —Ä–∞–∑–º–µ—Ä –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å —Ç–µ–Ω—å—é
    const drawTextWithShadow = (text, x, y, fontSize, color = 'white', weight = '700') => {
      ctx.font = `${weight} ${fontSize}px 'Segoe UI', sans-serif`;
      
      // –¢–µ–Ω—å (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–µ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞)
      ctx.shadowColor = 'rgba(0, 0, 0, 0.9)';
      ctx.shadowBlur = 15;
      ctx.shadowOffsetX = 0;
      ctx.shadowOffsetY = 0;
      
      // –û–±–≤–æ–¥–∫–∞
      ctx.strokeStyle = '#000';
      ctx.lineWidth = 4;
      ctx.strokeText(text, x, y);
      
      // –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
      ctx.fillStyle = color;
      ctx.shadowBlur = 8;
      ctx.fillText(text, x, y);
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–Ω—å
      ctx.shadowColor = 'transparent';
      ctx.shadowBlur = 0;
    };
    
    // –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô —É—Ä–æ–≤–µ–Ω—å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏: —Ç–æ–ª—å–∫–æ –§–ò–û
    if (privacyLevel === 'minimal') {
      if (name) {
        drawTextWithShadow(name, padding, yPos, 40, 'white', '800');
      }
      return;
    }
    
    // –í–´–°–û–ö–ò–ô —É—Ä–æ–≤–µ–Ω—å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏: —Ç–æ–ª—å–∫–æ –∫–æ–º–ø–∞–Ω–∏—è
    if (privacyLevel === 'high') {
      if (company) {
        drawTextWithShadow(company, padding, yPos, 32, 'white', '700');
      }
      return;
    }
    
    // –ù–ò–ó–ö–ò–ô –∏ –°–†–ï–î–ù–ò–ô —É—Ä–æ–≤–µ–Ω—å: –∏–º—è, –¥–æ–ª–∂–Ω–æ—Å—Ç—å, –∫–æ–º–ø–∞–Ω–∏—è
    if (name) {
      drawTextWithShadow(name, padding, yPos, 40, 'white', '800');
      yPos += lineHeight;
    }
    
    if (position) {
      drawTextWithShadow(position, padding, yPos, 26, '#ffd700', '700');
      yPos += lineHeight * 0.7;
    }
    
    if (company) {
      drawTextWithShadow(company, padding, yPos, 20, '#e0e0e0', '600');
      yPos += smallLineHeight;
    }
    
    // –ù–ò–ó–ö–ò–ô —É—Ä–æ–≤–µ–Ω—å –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ email –∏ telegram
    if (privacyLevel === 'low') {
      if (email) {
        drawTextWithShadow(email, padding, yPos, 18, '#9db4ff', '600');
        yPos += smallLineHeight;
      }
      
      if (telegram) {
        drawTextWithShadow(telegram, padding, yPos, 18, '#9db4ff', '600');
      }
    }
  };

  const renderMaskToCanvas = (pha, w, h) => {
    if (!outputCanvas.value || !sourceVideo.value) return;

    const ctx = outputCanvas.value.getContext("2d");
    const videoWidth = sourceVideo.value.videoWidth;
    const videoHeight = sourceVideo.value.videoHeight;

    if (!videoWidth || !videoHeight) return;

    // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º canvas –ø–æ–¥ –≤–∏–¥–µ–æ
    outputCanvas.value.width = videoWidth;
    outputCanvas.value.height = videoHeight;

    // –†–∏—Å—É–µ–º –≤–∏–¥–µ–æ
    ctx.drawImage(sourceVideo.value, 0, 0, videoWidth, videoHeight);

    if (props.backgroundEnabled) {
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π canvas –¥–ª—è –º–∞—Å–∫–∏
      const maskCanvas = document.createElement("canvas");
      maskCanvas.width = w;
      maskCanvas.height = h;
      const maskCtx = maskCanvas.getContext("2d");

      const imageData = maskCtx.createImageData(w, h);
      const data = imageData.data;

      // –ó–∞–ø–æ–ª–Ω—è–µ–º –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª –∏–∑ –º–∞—Å–∫–∏
      for (let i = 0; i < w * h; i++) {
        const alpha = Math.max(0, Math.min(255, Math.round(pha[i] * 255)));
        data[i * 4] = alpha;
        data[i * 4 + 1] = alpha;
        data[i * 4 + 2] = alpha;
        data[i * 4 + 3] = 255;
      }
      maskCtx.putImageData(imageData, 0, 0);

      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ–Ω (—Ç–µ–∫—Å—Ç —É–∂–µ –±—É–¥–µ—Ç –Ω–∞ —Ñ–æ–Ω–µ)
      applyBackground(ctx, maskCanvas, videoWidth, videoHeight);
    } else {
      // –ï—Å–ª–∏ —Ñ–æ–Ω –Ω–µ –≤–∫–ª—é—á–µ–Ω, —Ä–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–≤–µ—Ä—Ö –≤–∏–¥–µ–æ
      drawUserInfoOnCanvas(ctx, videoWidth, videoHeight);
    }
  };

  const applyBackground = (ctx, maskCanvas, width, height) => {
    const bgType = props.backgroundConfig.type;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ
    const videoData = ctx.getImageData(0, 0, width, height);

    // –°–æ–∑–¥–∞–µ–º —Ñ–æ–Ω
    if (bgType === "blur") {
      // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º—ã—Ç—ã–π —Ñ–æ–Ω —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
      renderCachedBlur(ctx, width, height);
    } else if (bgType === "color") {
      // –û–¥–Ω–æ—Ç–æ–Ω–Ω—ã–π —Ü–≤–µ—Ç
      const color = hexToRgb(props.backgroundConfig.color);
      ctx.fillStyle = `rgb(${color.r}, ${color.g}, ${color.b})`;
      ctx.fillRect(0, 0, width, height);
    } else if (bgType === "photo" && props.backgroundConfig.photo) {
      // –§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      const bgImage = loadedBackgroundImage.value;
      if (bgImage && bgImage.complete) {
        // –†–∏—Å—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Ä–∞—Å—Ç—è–≥–∏–≤–∞—è –Ω–∞ –≤–µ—Å—å canvas
        ctx.drawImage(bgImage, 0, 0, width, height);
      } else {
        // Fallback –Ω–∞ —Ü–≤–µ—Ç, –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
        ctx.fillStyle = "#2e2e2e";
        ctx.fillRect(0, 0, width, height);
      }
    }

    // –†–ò–°–£–ï–ú –¢–ï–ö–°–¢ –ù–ê –§–û–ù–ï (–¥–æ –Ω–∞–ª–æ–∂–µ–Ω–∏—è —á–µ–ª–æ–≤–µ–∫–∞)
    drawUserInfoOnCanvas(ctx, width, height);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ–Ω —Å —Ç–µ–∫—Å—Ç–æ–º
    const bgData = ctx.getImageData(0, 0, width, height);

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
    ctx.putImageData(videoData, 0, 0);

    // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –º–∞—Å–∫—É –¥–æ —Ä–∞–∑–º–µ—Ä–∞ –≤–∏–¥–µ–æ
    const scaledMaskCanvas = document.createElement("canvas");
    scaledMaskCanvas.width = width;
    scaledMaskCanvas.height = height;
    const scaledMaskCtx = scaledMaskCanvas.getContext("2d");
    scaledMaskCtx.drawImage(maskCanvas, 0, 0, width, height);
    const maskData = scaledMaskCtx.getImageData(0, 0, width, height);

    // –ö–æ–º–ø–æ–∑–∏—Ç–∏–Ω–≥: —Å–º–µ—à–∏–≤–∞–µ–º –ø–µ—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω –∏ —Ñ–æ–Ω –ø–æ –º–∞—Å–∫–µ
    const resultData = ctx.createImageData(width, height);
    for (let i = 0; i < width * height; i++) {
      const idx = i * 4;
      const alpha = maskData.data[idx] / 255; // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∞–ª—å—Ñ—É

      // –°–º–µ—à–∏–≤–∞–µ–º –ø–æ –∞–ª—å—Ñ–µ
      resultData.data[idx] =
        videoData.data[idx] * alpha + bgData.data[idx] * (1 - alpha);
      resultData.data[idx + 1] =
        videoData.data[idx + 1] * alpha + bgData.data[idx + 1] * (1 - alpha);
      resultData.data[idx + 2] =
        videoData.data[idx + 2] * alpha + bgData.data[idx + 2] * (1 - alpha);
      resultData.data[idx + 3] = 255;
    }

    ctx.putImageData(resultData, 0, 0);
  };

  const processFrame = async () => {
    if (!worker || !isReady || !sourceVideo.value || !outputCanvas.value)
      return;

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    if (props.backgroundConfig.type === "photo" && props.backgroundConfig.photo) {
      loadBackgroundImage(props.backgroundConfig.photo);
    }

    frameSkipCounter++;
    
    // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫ –∫–∞–¥—Ä–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    if (frameSkipCounter % adaptiveFrameSkip !== 0) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é –º–∞—Å–∫—É
      if (lastProcessedMask) {
        renderMaskToCanvas(lastProcessedMask.pha, lastProcessedMask.w, lastProcessedMask.h);
      }
      return;
    }

    // –ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∞—è –µ—â–µ –∏–¥–µ—Ç
    if (isProcessing) return;
    
    isProcessing = true;

    const video = sourceVideo.value;
    const vw = video.videoWidth || 640;
    const vh = video.videoHeight || 360;

    if (!vw || !vh) {
      isProcessing = false;
      return;
    }

    // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const { w, h } = calcScaledSize(vw, vh, targetShort);

    // –°–æ–∑–¥–∞–µ–º OffscreenCanvas –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    const offscreen = new OffscreenCanvas(w, h);
    const offscreenCtx = offscreen.getContext("2d");
    offscreenCtx.drawImage(video, 0, 0, w, h);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–¥—Ä –≤–æ—Ä–∫–µ—Ä—É —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    const bitmap = offscreen.transferToImageBitmap();
    worker.postMessage({ 
      type: "run", 
      bitmap, 
      downsample: adaptiveDownsample 
    }, [bitmap]);

    // –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–¥—Ä –≤ –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä (–µ—Å–ª–∏ –≥–æ—Ç–æ–≤)
    if (composer && isComposerReady) {
      try {
        const frameBitmap = await createImageBitmap(video, 0, 0, vw, vh);
        composer.postMessage({ type: 'frame', frame: frameBitmap }, [frameBitmap]);
      } catch (error) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–¥—Ä –≤ –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä:', error);
      }
    }
  };

  const calcScaledSize = (videoWidth, videoHeight, targetShortSide) => {
    let w = videoWidth;
    let h = videoHeight;

    if (videoWidth < videoHeight) {
      const scale = targetShortSide / videoWidth;
      w = Math.round(videoWidth * scale);
      h = Math.round(videoHeight * scale);
    } else {
      const scale = targetShortSide / videoHeight;
      w = Math.round(videoWidth * scale);
      h = Math.round(videoHeight * scale);
    }
    return { w, h };
  };

  const updateFrameStats = (processingTime, postProcessTime = 0) => {
    frameCount++;
    fpsFrameCount++;

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats.value.latency = processingTime;
    stats.value.postProcessTime = postProcessTime;
    stats.value.adaptiveDownsample = adaptiveDownsample;
    stats.value.adaptiveFrameSkip = adaptiveFrameSkip;

    // FPS
    const now = Date.now();
    if (now - lastFpsTime >= 1000) {
      const fps = fpsFrameCount;
      stats.value.fps = fps;

      fpsHistory.push(fps);
      if (fpsHistory.length > 10) {
        fpsHistory.shift();
      }

      const avgFps = Math.round(
        fpsHistory.reduce((a, b) => a + b, 0) / fpsHistory.length,
      );
      stats.value.avgFps = avgFps;

      fpsFrameCount = 0;
      lastFpsTime = now;
    }

    // Latency
    stats.value.latency = Math.round(emaLatencyMs);

    // CPU (–æ—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏)
    // –ü—Ä–∏ 30fps –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞–¥—Ä–∞ –¥–æ–ª–∂–Ω–æ —É—Ö–æ–¥–∏—Ç—å ~33ms
    // –ü—Ä–∏ 60fps –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞–¥—Ä–∞ –¥–æ–ª–∂–Ω–æ —É—Ö–æ–¥–∏—Ç—å ~16ms
    const targetFrameTime = 1000 / (stats.value.fps || 30);
    const cpuUsageRatio = Math.min(1, processingTime / targetFrameTime);
    const estimatedCPU = Math.round(cpuUsageRatio * 100);
    
    // –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ —Å –±–æ–ª–µ–µ —Å–∏–ª—å–Ω—ã–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º
    const smoothingFactor = 0.15;
    stats.value.cpu = Math.round(
      estimatedCPU * smoothingFactor + (stats.value.cpu || 0) * (1 - smoothingFactor),
    );

    // GPU (—ç–º—É–ª—è—Ü–∏—è)
    if (stats.value.fps > 0) {
      const estimatedGPU = Math.min(100, Math.round(Math.random() * 30 + 15));
      stats.value.gpu = estimatedGPU;
    }
  };

  const hexToRgb = (hex) => {
    const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result
      ? {
          r: parseInt(result[1], 16),
          g: parseInt(result[2], 16),
          b: parseInt(result[3], 16),
        }
      : { r: 0, g: 255, b: 0 };
  };

  const start = () => {
    console.log("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞");
  };

  const stop = () => {
    console.log("–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞");
    if (worker) {
      worker.postMessage({ type: "reset" });
    }
    if (composer) {
      try {
        composer.postMessage({ type: "stop" });
      } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–ø–æ–∑–∏—Ç–æ—Ä–∞:', error);
      }
    }
    frameCount = 0;
    fpsHistory = [];
    stats.value = { cpu: 0, gpu: 0, fps: 0, avgFps: 0, latency: 0 };
  };

  // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤
  const setTurboMode = (enabled) => {
    turboMode = enabled;
    if (turboMode) {
      console.log('‚ö° –¢—É—Ä–±–æ-—Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å');
      adaptiveDownsample = 0.8;
      adaptiveFrameSkip = 2;
    } else {
      console.log('üé® –†–µ–∂–∏–º –∫–∞—á–µ—Å—Ç–≤–∞ –≤–∫–ª—é—á–µ–Ω: –±–∞–ª–∞–Ω—Å –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
      adaptiveDownsample = 0.5;
      adaptiveFrameSkip = 1;
    }
  };

  const setQualityMode = (enabled) => {
    setTurboMode(!enabled);
  };

  // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –±–ª—é—Ä–∞
  const clearBlurCache = () => {
    blurCache = null;
    lastBlurTime = 0;
    lastBlurFrame = null;
    lastBlurConfig = null;
    motionDetected = false;
    staticFrameCount = 0;
    console.log('üßπ –ö—ç—à –±–ª—é—Ä–∞ –æ—á–∏—â–µ–Ω');
  };

  return {
    initialize,
    start,
    stop,
    processFrame,
    updateStats: updateFrameStats,
    setTurboMode,
    setQualityMode,
    clearBlurCache,
  };
}
