import fs from "fs";
import https from "https";
import path from "path";
import { fileURLToPath } from "url";
import { exec } from "child_process";
import { promisify } from "util";

const execAsync = promisify(exec);
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ FP16
const MODEL_URL =
  "https://github.com/PeterL1n/RobustVideoMatting/releases/download/v1.0.0/rvm_resnet50_fp16.onnx";

// –ü—É—Ç–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
const PUBLIC_DIR = path.join(__dirname, "..", "public");
const MODELS_DIR = path.join(PUBLIC_DIR, "models");

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
[PUBLIC_DIR, MODELS_DIR].forEach((dir) => {
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å –ø–æ–º–æ—â—å—é curl/wget
async function downloadWithCurl(url, dest) {
  console.log("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ —Å –ø–æ–º–æ—â—å—é curl/wget...");

  try {
    // –ü—Ä–æ–±—É–µ–º curl —Å –æ–ø—Ü–∏–µ–π -L –¥–ª—è —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞–º
    await execAsync(`curl -L -o "${dest}" "${url}"`);
    return true;
  } catch (curlError) {
    console.log("curl –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º wget...");

    try {
      // –ü—Ä–æ–±—É–µ–º wget
      await execAsync(`wget -O "${dest}" "${url}"`);
      return true;
    } catch (wgetError) {
      console.log("‚ùå wget —Ç–∞–∫–∂–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω");
      return false;
    }
  }
}

async function main() {
  console.log("ü§ñ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ RVM ResNet50 FP16...");
  console.log("üì¶ –†–∞–∑–º–µ—Ä: ~51MB");

  const modelPath = path.join(MODELS_DIR, "rvm_resnet50_fp16.onnx");

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
  if (fs.existsSync(modelPath)) {
    const stats = fs.statSync(modelPath);
    if (stats.size > 50 * 1024 * 1024) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –±–æ–ª—å—à–µ 50MB
      console.log("‚úÖ –ú–æ–¥–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!");
      console.log(`üìä –†–∞–∑–º–µ—Ä: ${Math.round(stats.size / 1024 / 1024)}MB`);
      return;
    } else {
      console.log("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º...");
      fs.unlinkSync(modelPath);
    }
  }

  try {
    const success = await downloadWithCurl(MODEL_URL, modelPath);

    if (!success) {
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ—Ä–µ–∑ curl/wget");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    const stats = fs.statSync(modelPath);
    if (stats.size < 50 * 1024 * 1024) {
      throw new Error(
        `–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª (${Math.round(stats.size / 1024 / 1024)}MB)`,
      );
    }

    console.log(`‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!`);
    console.log(`üìä –†–∞–∑–º–µ—Ä: ${Math.round(stats.size / 1024 / 1024)}MB`);
    console.log(`üìÅ –ü—É—Ç—å: ${modelPath}`);
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", err.message);

    console.log("\nüìã –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±:");
    console.log("1. –°–∫–∞—á–∞–π—Ç–µ –º–æ–¥–µ–ª—å –≤—Ä—É—á–Ω—É—é –ø–æ —Å—Å—ã–ª–∫–µ:");
    console.log(`   ${MODEL_URL}`);
    console.log("\n2. –ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª –≤ –ø–∞–ø–∫—É:");
    console.log(`   ${MODELS_DIR}/`);
    console.log("\n3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è:");
    console.log("   rvm_resnet50_fp16.onnx");
  }
}

main().catch(console.error);
